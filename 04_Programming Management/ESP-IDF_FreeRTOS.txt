/* Some commands and code from https://docs.espressif.com/projects/esp-idf/en/v4.3/esp32/api-reference/system/freertos.html#:~:text=vTaskDelay()%20specifies%20a%20time,after%20vTaskDelay()%20is%20called.

If you want to print the usual printf() will not work.
Instead create a variable inside your task (only needs to be done once per task):
char* task_name = pcTaskGetName(NULL);

Whenever you want to print something use:
ESP_LOGI(task_name, "The string you want to print\n");


If a delay is needed use:
vTaskDelay(Number_of_millisecond / portTICK_PERIOD_MS);
This is not a good solution for periodic tasks, consult the documentation to learn more (vTaskDelayUntil).


Tasks

What is a task?
A task (called a thread in most other operating systems) can be thought of as a program itself. It is a just some code that will get executed by the CPU.
Since there are more tasks one cannot occupy the CPU forever. This is where task scheduling comes in.
Imagine an ice cream shop where the shopkeep is the CPU serving the guests who are the customers and the kind of ice cream they order is the code of the task.
The customers stand in a queue and wait to be served (thread is being executed), after that they can sit down and eat their ice cream (not ready state).
After they finish their ice cream they rejoin the queue at the end (ready state).

Why is this good?
Many things, too many to list. In our case it will potentially make writing the code a whole lot easier than only using a single thread (a single program,
remember threads can be though of as separate programs more or less).

Creating a task:

Create a handle in the task that creates our task (a handle is sort of an id number for the operating system)

TaskHandle_t xHandle = NULL;
type^        name^     ^init value

xTaskCreate(vTaskCode, // The name of the task body, it is written like a function, example after this
            "NAME", // The task can have a name, in fact please name them whenever they are created, because when printing the name of the task shows up, making debugging easier
            STACK_SIZE, // Size of the stack (static memory) that is reserved for the task
            &ucParameterToPass, // Argument that can be passed to the task when created, just like a function, can only be a pointer
            tskIDLE_PRIORITY, // The priority that the task should run at. In our case this likely won't matter much, but a default value can be 2 for example (maybe 1 idk)
            &xHandle); // This is where you put the handle previously created

DON'T DO THIS FOR NOW -- configASSERT(xHandle); // Call this after creating a task, checks if the handle is NULL
        
Code example:

{ // This happens inside some function (main, or even some other task)
...
static uint8_t ucParameterToPass = 6;
TaskHandle_t xADCHandle = NULL;

xTaskCreate(vTaskADC, "ADC", STACK_SIZE, &ucParameterToPass, 2, &xADCHandle);
...
}

void vTaskADC( void * pvParameters ) {
    // Just a more efficient infinite loop, all task should be infinite loops
    for( ;; ) {
        // Task code goes here.
    }
}



*/